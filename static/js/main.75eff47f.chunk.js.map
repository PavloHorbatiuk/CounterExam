{"version":3,"sources":["Counter/Counter.module.css","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","useState","startNumber","setStartNumber","maxValue","setMaxValue","count","setCount","error","setError","valueError","setValueError","optimizatorDisableButton","num","optimizatorValueCode","num1","num2","optimizatorErrorMessage","useEffect","getLocalStorageValue","localStorage","setItem","JSON","stringify","storageStartValueAsString","getItem","storageMaxValueAsString","newMaxValueFromStorage","parse","console","log","newStartValueFromStorage","className","s","maincontainer","item","block1","inputStyle1","value","type","onChange","e","inputMaxValue","parseInt","currentTarget","startValue","setButton","disabled","onClick","block2","redNumber","sValue","inc_reset","App","document","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,KAAO,sBAAsB,OAAS,wBAAwB,UAAY,2BAA2B,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,UAAY,2BAA2B,UAAY,6B,gKCsGvTC,MAnGf,WAAoB,IAAD,EACuBC,mBAAS,GADhC,mBACRC,EADQ,KACKC,EADL,OAEiBF,mBAAS,GAF1B,mBAERG,EAFQ,KAEEC,EAFF,OAGWJ,mBAAS,GAHpB,mBAGRK,EAHQ,KAGDC,EAHC,OAIWN,oBAAS,GAJpB,mBAIRO,EAJQ,KAIDC,EAJC,OAKqBR,mBAA0B,GAL/C,mBAKRS,EALQ,KAKIC,EALJ,KAOTC,EAA2B,SAACC,GACpBJ,EAAVI,EAAM,IAEJC,EAAuB,SAACC,EAAcC,GACzBP,EAAfM,GAAQC,IAENC,EAA0B,SAACJ,GACnBF,EAAVE,EAAM,EAAkB,kBAAmC,+BAI/DK,qBAAU,WACNC,MACD,IAEHD,qBAAU,WACNE,aAAaC,QAAQ,WAAYC,KAAKC,UAAUnB,IAChDgB,aAAaC,QAAQ,cAAeC,KAAKC,UAAUrB,MACpD,CAACE,EAAUF,IAEd,IAAMiB,EAAuB,WACzB,IAAIK,EAA4BJ,aAAaK,QAAQ,eACjDC,EAA0BN,aAAaK,QAAQ,YACnD,GAAIC,EAAyB,CACzB,IAAIC,EAAyBL,KAAKM,MAAMF,GACxCrB,EAAYsB,GACZE,QAAQC,IAAIH,GAEhB,GAAIH,EAA2B,CAC3B,IAAIO,EAA2BT,KAAKM,MAAMJ,GAC1CrB,EAAe4B,KA+BvB,OACI,qBAAKC,UAAWC,IAAEC,cAAlB,SACI,sBAAKF,UAAWC,IAAEE,KAAlB,UACI,sBAAKH,UAAWC,IAAEG,OAAlB,UACI,sBAAKJ,UAAWC,IAAEI,YAAlB,wBACe,uBACXC,MAAOlC,EACPmC,KAAK,SACLC,SA/BG,SAACC,GACpB,IAAIC,EAAgBC,SAASF,EAAEG,cAAcN,OAC7CrB,EAAwByB,GACxB9B,EAAyB8B,GACzB5B,EAAqBZ,EAAawC,GAClCrC,EAAYqC,MAsBA,eAMgB,uBACZH,KAAK,SACLD,MAAOpC,EACPsC,SA7BK,SAACC,GACtB,IAAII,EAAaF,SAASF,EAAEG,cAAcN,OAC1CrB,EAAwB4B,GACxBjC,EAAyBiC,GACzB/B,EAAqB+B,EAAYzC,GACjCD,EAAe0C,SA0BH,qBAAKb,UAAWC,IAAEa,UAAlB,SACI,wBAAQC,SAAUvC,EAAOwC,QA3C3B,WACd3C,EAAYD,GACZG,EAASL,IAyCO,sBAGR,sBAAK8B,UAAWC,IAAEgB,OAAlB,UACI,qBAAKjB,UAAWxB,EAAQyB,IAAEiB,UAAYjB,IAAEkB,OAAxC,SAAiD7C,GAAgBI,IACjE,sBAAKsB,UAAWC,IAAEmB,UAAlB,UACI,wBAAQL,SAAUvC,EAAOwC,QA9BzB,WACf1C,IAAUF,EAAYG,EAASD,EAAQ,GAAKG,GAAS,IA6BtC,iBACA,wBAAQuC,QA5BN,WAClBzC,EAAS,GACTE,GAAS,IA0BO,+BCjFT4C,MATf,WAEI,OADAC,SAASC,MAAM,UAEX,8BACI,cAAC,EAAD,OCKGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,M","file":"static/js/main.75eff47f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"maincontainer\":\"Counter_maincontainer__1y0Ih\",\"item\":\"Counter_item__3Pq1D\",\"block1\":\"Counter_block1__2p1lF\",\"setButton\":\"Counter_setButton__2-exQ\",\"inputStyle1\":\"Counter_inputStyle1__1G_vk\",\"block2\":\"Counter_block2__3dRM4\",\"sValue\":\"Counter_sValue__5wyOw\",\"inc_reset\":\"Counter_inc_reset__22IIn\",\"redNumber\":\"Counter_redNumber__3_Ch8\"};","import React, {ChangeEvent, useEffect, useState} from 'react' ;\r\nimport s from './Counter.module.css'\r\n\r\n\r\nfunction Counter() {\r\n    const [startNumber, setStartNumber] = useState(0);\r\n    const [maxValue, setMaxValue] = useState(0);\r\n    const [count, setCount] = useState(0);\r\n    const [error, setError] = useState(false)\r\n    const [valueError, setValueError] = useState<number | string>(0)\r\n\r\n    const optimizatorDisableButton = (num: number) => {\r\n        num < 0 ? setError(true) : setError(false)\r\n    }\r\n    const optimizatorValueCode = (num1: number, num2: number) => {\r\n        num1 >= num2 ? setError(true) : setError(false);\r\n    }\r\n    const optimizatorErrorMessage = (num: number) => {\r\n        num < 0 ? setValueError(\"incorrect value\") : setValueError(\"Press set to install value\")\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getLocalStorageValue();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue));\r\n        localStorage.setItem(\"startNumber\", JSON.stringify(startNumber));\r\n    }, [maxValue, startNumber]);\r\n\r\n    const getLocalStorageValue = () => {\r\n        let storageStartValueAsString = localStorage.getItem(\"startNumber\")\r\n        let storageMaxValueAsString = localStorage.getItem(\"maxValue\")\r\n        if (storageMaxValueAsString) {\r\n            let newMaxValueFromStorage = JSON.parse(storageMaxValueAsString)\r\n            setMaxValue(newMaxValueFromStorage)\r\n            console.log(newMaxValueFromStorage)\r\n        }\r\n        if (storageStartValueAsString) {\r\n            let newStartValueFromStorage = JSON.parse(storageStartValueAsString)\r\n            setStartNumber(newStartValueFromStorage)\r\n        }\r\n    }\r\n\r\n    const setNumber = () => {\r\n        setMaxValue(maxValue)\r\n        setCount(startNumber)\r\n    }\r\n    const maxValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let inputMaxValue = parseInt(e.currentTarget.value);\r\n        optimizatorErrorMessage(inputMaxValue);\r\n        optimizatorDisableButton(inputMaxValue);\r\n        optimizatorValueCode(startNumber, inputMaxValue);\r\n        setMaxValue(inputMaxValue)\r\n    };\r\n    const startValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let startValue = parseInt(e.currentTarget.value);\r\n        optimizatorErrorMessage(startValue)\r\n        optimizatorDisableButton(startValue);\r\n        optimizatorValueCode(startValue, maxValue);\r\n        setStartNumber(startValue)\r\n\r\n    }\r\n    const incCallback = () => {\r\n        (count !== maxValue) ? setCount(count + 1) : setError(true)\r\n    }\r\n    const resetCallback = () => {\r\n        setCount(0)\r\n        setError(false)\r\n\r\n    }\r\n    return (\r\n        <div className={s.maincontainer}>\r\n            <div className={s.item}>\r\n                <div className={s.block1}>\r\n                    <div className={s.inputStyle1}>\r\n                        Max value: <input\r\n                        value={maxValue}\r\n                        type=\"number\"\r\n                        onChange={maxValueChange}\r\n                    />\r\n                        Start value:<input\r\n                        type='number'\r\n                        value={startNumber}\r\n                        onChange={startValueChange}/>\r\n                    </div>\r\n                    <div className={s.setButton}>\r\n                        <button disabled={error} onClick={setNumber}>Set</button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.block2}>\r\n                    <div className={error ? s.redNumber : s.sValue}>{count ? count : valueError}</div>\r\n                    <div className={s.inc_reset}>\r\n                        <button disabled={error} onClick={incCallback}>Inc</button>\r\n                        <button onClick={resetCallback}>Reset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import React from 'react' ;\nimport './App.module.css';\nimport s from './Counter/Counter.module.css'\nimport Counter from \"./Counter/Counter\";\n\nfunction App() {\n    document.title=\"Counter\"\n    return (\n        <div>\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}